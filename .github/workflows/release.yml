name: GitHub Actions Runner in Docker - Release
on:
  push:
    tags:
      - '*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
  ubuntu_latest_tag:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Copy Repo Files
      uses: actions/checkout@master
    - name: get version
      run: echo 'TAG='${GITHUB_REF#refs/tags/} >> $GITHUB_ENV
    - name: Get GitHub organization or user
      run: echo 'ORG='$(dirname ${GITHUB_REPOSITORY}) >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Login
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
    - name: Build
      uses: nick-invision/retry@v2
      with:
        max_attempts: 3
        retry_on: error
        timeout_minutes: 120
        command: docker buildx build -f Dockerfile -t ${ORG}/ghar-node:${TAG} --output "type=image,push=true" --platform linux/amd64,linux/arm64 .
  ubuntu_bionic_tag:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Copy Repo Files
      uses: actions/checkout@master
    - name: get version
      run: echo 'TAG='${GITHUB_REF#refs/tags/} >> $GITHUB_ENV
    - name: Get GitHub organization or user
      run: echo 'ORG='$(dirname ${GITHUB_REPOSITORY}) >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Copy Dockerfile
      run: cp Dockerfile Dockerfile.ubuntu-bionic; sed -i.bak "s/FROM.*/FROM styla\/ghar-node-base:ubuntu-bionic/" Dockerfile.ubuntu-bionic
    - name: Login
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
    - name: Build
      uses: nick-invision/retry@v2
      with:
        max_attempts: 3
        retry_on: error
        timeout_minutes: 120
        command: docker buildx build -f Dockerfile.ubuntu-bionic -t ${ORG}/ghar-node:${TAG}-ubuntu-bionic --output "type=image,push=true" --platform linux/amd64,linux/arm/v7,linux/arm64 .

  debian_tag:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release: [buster, bullseye, sid]
      fail-fast: false
    needs: create-release
    steps:
    - name: Copy Repo Files
      uses: actions/checkout@master
    - name: get version
      run: echo 'TAG='${GITHUB_REF#refs/tags/} >> $GITHUB_ENV
    - name: Get GitHub organization or user
      run: echo 'ORG='$(dirname ${GITHUB_REPOSITORY}) >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        buildx-version: latest
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Copy Dockerfile
      run: cp Dockerfile Dockerfile.debian-${{ matrix.release }}; sed -i.bak "s/FROM.*/FROM styla\/ghar-node-base:debian-${{ matrix.release }}/" Dockerfile.debian-${{ matrix.release }}
    - name: Login
      run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
    - name: Build
      uses: nick-invision/retry@v2
      with:
        max_attempts: 3
        retry_on: error
        timeout_minutes: 120
        command: docker buildx build -f Dockerfile.debian-${{ matrix.release }} -t ${ORG}/ghar-node:${TAG}-debian-${{ matrix.release }} --output "type=image,push=true" --platform linux/amd64,linux/arm64,linux/arm/v7 .
